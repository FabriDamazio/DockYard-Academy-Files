# Git

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Git">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/command_line.livemd">Command Line</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/livebook.livemd">Livebook</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Visão Geral

### Controle de Versão

O controle de versão é um sistema que ajuda você a rastrear as alterações em seus arquivos ao longo do tempo. Ele permite que você salve diferentes versões do seu trabalho e colabore com outras pessoas de maneira eficiente. Com o controle de versão, você pode facilmente comparar, reverter e mesclar alterações, garantindo que você tenha um histórico de todas as modificações feitas em seu projeto e permitindo uma colaboração eficaz e backup do seu código.

<!-- livebook:{"break_markdown":true} -->

### Git

O Git é um sistema de controle de versão amplamente utilizado que ajuda você a acompanhar as alterações feitas em seus arquivos.

<!-- livebook:{"break_markdown":true} -->

### GitHub

O GitHub é uma plataforma baseada na web que fornece hospedagem para desenvolvimento de software e uma comunidade de desenvolvedores para colaborar e contribuir para projetos de código aberto e fechado. Ele é construído em cima do Git e fornece uma interface amigável para os desenvolvedores gerenciarem seu código.

O GitHub fornece vários recursos-chave para os desenvolvedores, incluindo:

* **Repositórios**: Os desenvolvedores podem criar e hospedar seu código em "repositórios" individuais no GitHub, que podem ser facilmente compartilhados e colaborados com outros desenvolvedores. Esses repositórios podem ser **públicos** ou **privados**.
* **Colaboração**: Os desenvolvedores podem colaborar facilmente no código criando um "forking" (bifurcação) de um repositório, fazendo alterações e, em seguida, enviando essas alterações de volta ao repositório original por meio de um "pull request".
* **Issues**: Os desenvolvedores podem rastrear e gerenciar bugs, solicitações de recursos e outras tarefas criando "issues" dentro de um repositório.
* **Pull requests (PRs)**: Os desenvolvedores podem enviar alterações para um repositório criando um "pull request", que pode ser revisado e aprovado por outros membros da equipe de desenvolvimento.
* **Branching**: Os desenvolvedores podem criar e trabalhar em várias branches de um repositório, permitindo que eles trabalhem em diferentes recursos ou correções de bugs sem afetar o código principal.
* **Wiki**: Os desenvolvedores podem criar uma wiki para o seu repositório para fornecer documentação e outras informações sobre a base de código.

Com o Git e o GitHub, os desenvolvedores armazenam uma versão **local** de suas alterações com o git e enviam essas alterações para uma versão **remota** no GitHub.

## Instalar o Git

O Git é um programa instalado localmente no seu computador. O Git vem pré-instalado nos sistemas operacionais macOS e Linux. Se você usa o Windows, terá que [Instalar o Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).

Digite o seguinte na linha de comando para confirmar que você tem o Git instalado. Você deve ver uma saída semelhante, mas provavelmente com uma versão diferente do git.

```sh
$ git --version
git version 2.25.1
```

Para manter a consistência com o material de leitura e instrução neste curso, recomendamos o uso da linha de comando para o Git em vez de um programa como o GitHub Desktop.

## Sua vez: Crie uma conta no GitHub

[Crie uma conta no GitHub](https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account) se ainda não o fez. Você também pode querer configurar [Configurar SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) ou algum método de autorização alternativo para que você não precise inserir suas credenciais toda vez que interagir com o GitHub.

## Levantando uma Issue

Qualquer pessoa pode levantar uma issue em um projeto público do GitHub. Por exemplo, você pode [levantar uma issue](https://github.com/DockYard-Academy/curriculum/issues) indo para a aba de issues na [Página do GitHub](https://github.com/DockYard-Academy/curriculum) deste currículo e clicando em **Nova Issue**.

Por favor, levante uma issue ou fale com seu instrutor se encontrar um problema com o currículo.

## Inicializando um Repositório Local

O Git usa uma pasta `.git` que armazena as pastas e arquivos necessários para gerenciar o controle de versão do projeto. Chamamos esta pasta gerenciada pelo git de **repositório**.

Usando a linha de comando, você pode inicializar o Git no seu diretório de trabalho atual executando:

```sh
$ git init
```

<p style="background-color: orangered; padding: 1rem; color: white; font-weight: bold;">
ATENÇÃO: NÃO INICIE O GIT A MENOS QUE VOCÊ QUEIRA QUE ESSA PASTA SEJA UM REPOSITÓRIO GIT.
</p>

<p style="background-color: orange; padding: 1rem; font-weight: bold;">
AVISO: GERALMENTE VOCÊ NÃO DEVE ANINHAR REPOSITÓRIOS GIT.
</p>

<!-- livebook:{"break_markdown":true} -->

### Sua vez

Use a linha de comando para criar um novo projeto gerenciado pelo Git chamado `git_example`.

Você pode usar `git status` na linha de comando da pasta `git_example` para verificar se o Git gerencia a pasta. Assim:

```sh
$ git init
Initialized empty Git repository in ~/github_example/.git/
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
```

## Fazendo Staging e Commit de Alterações

O Git permite que você salve suas alterações em um commit. As alterações passam de **não rastreadas** para **em staging** para **comitadas**.

```mermaid
flowchart LR
  Untracked --git add--> Staged --git commit--> Committed
```

Você usará alguns comandos comuns para salvar alterações no Git.

* `git status`: Exibir informações do Git e ver as alterações não rastreadas e em staging.
* `git add`: Colocar as alterações atuais em staging.
* `git commit`: Salvar alterações em staging em um commit.

Colocando tudo isso junto, parece assim se for executado a partir da pasta do projeto. Os comandos `git status` são opcionais.

```
$ git status
$ git add .
$ git status
$ git commit -m "mensagem de commit exemplo"
$ git status
```

<!-- livebook:{"break_markdown":true} -->

### Sua vez

Você vai fazer staging e commit de algumas alterações no projeto `github_example`.

No `github_example`, crie um arquivo vazio chamado `finished.txt`.

Use `git add` e `git commit` para fazer staging e commit do arquivo. Certifique-se de verificar o status entre cada passo com `git status` para ver como os arquivos em staging e não rastreados são exibidos no terminal.

## Clonando Repositórios

Você pode clonar repositórios remotos para criar um projeto Git local no seu computador.

```mermaid
flowchart LR
Remoto --git clone--> Local
```

Existem muitos métodos para clonar um repositório remoto no seu computador.

<!-- livebook:{"break_markdown":true} -->

### Clonando com a Linha de Comando

Muitos desenvolvedores preferem usar a linha de comando usando HTTP, SSH ou o GitHub CLI.

Você pode encontrar instruções para cada método no GitHub:

* [HTTPS](https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls)
* [SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)
* [GitHub CLI](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)

<!-- livebook:{"break_markdown":true} -->

#### HTTPS

HTTPS (Protocolo Seguro de Transferência de Hipertexto) é um método de transferência de dados. Neste caso, usamos para copiar arquivos do repositório remoto do GitHub para o nosso computador local.

Mais praticamente, é o método mais fácil para a linha de comando, no entanto, a desvantagem é que é menos seguro e requer que você insira suas credenciais do GitHub toda vez que usa um comando `git`.

Usamos `git clone` com a URL fornecida pelo GitHub para clonar o repositório com HTTPS.

```sh
$ git clone https://github.com/BrooklinJazz/github_example.git
```

<!-- livebook:{"break_markdown":true} -->

No entanto, você precisará inserir credenciais toda vez que usar `git push` ou qualquer outro comando `git` que interaja com um repositório remoto.

```sh
$ git push
Username for 'https://github.com':
Password for 'https://a@github.com':
```

HTTP é tedioso para projetos que você usa regularmente, a menos que você configure sua máquina para lembrar suas credenciais git para você.

<!-- livebook:{"break_markdown":true} -->

### SSH

SSH é mais seguro do que HTTPS e não requer um nome de usuário ou senha para autenticação. Em vez disso, usa uma chave SSH armazenada localmente no seu computador.

No entanto, é mais complexo de configurar. Se você deseja usar SSH, siga as instruções para [conectar ao github com ssh](https://docs.github.com/en/authentication/connecting-to-github-with-ssh).

Você vai querer seguir as instruções para:

* [Sobre SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh) (opcional)
* [Verificando chaves SSH existentes](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys) (opcional)
* [Gerando uma nova chave SSH e adicionando-a ao agente ssh](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)
* [Adicionando uma nova chave SSH à sua conta GitHub](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
* [Testando sua conexão SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection)
* [Trabalhando com senhas de chave SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases) (opcional)

Então você pode usar o `git clone` com a URL SSH fornecida.

```sh
$ git clone git@github.com:BrooklinJazz/github_example.git
```

<!-- livebook:{"break_markdown":true} -->

### GitHub CLI

O GitHub CLI oferece algumas conveniências para trabalhar com Git e GitHub. Ele permite que você use a linha de comando para realizar tarefas que normalmente exigiriam o GitHub.

Está além do escopo deste curso, mas você pode [aprender mais aqui](https://github.com/cli/cli).

<!-- livebook:{"break_markdown":true} -->

### Sua vez

Clone seu projeto `github_example` em seu computador com um novo nome `github_example2`.

Para clonar um projeto com um novo nome, forneça um novo nome ao comando `git clone`.

```
$ git clone <url> github_example2
```

## Branches

Por padrão, todas as alterações do Git acontecem na branch `main`. Podemos criar outras branches **locais** ou **remotas** para agrupar alterações. Normalmente, criaremos uma branch de recurso para agrupar alterações relacionadas.

`git checkout -b` cria uma nova branch.

```
$ git checkout -b example-feature-branch-name
```

Ele também pode alternar da branch atual para outra branch existente.

```
$ git checkout main
```

<!-- livebook:{"break_markdown":true} -->

```mermaid
---
title: Git
---
gitGraph
   commit
   commit
   branch feature-branch
   checkout feature-branch
   commit
   commit
```

<!-- livebook:{"break_markdown":true} -->

### Mesclando alterações locais

Podemos mesclar alterações de uma branch local para outra com `git merge`.

```mermaid
---
title: Git
---
gitGraph
   commit
   commit
   branch feature-branch
   checkout feature-branch
   commit
   commit
   checkout main
   merge feature-branch
   commit
   commit
```

Temos que fazer checkout na branch em que queremos mesclar as alterações. Aqui está um exemplo de fluxo:

<!-- livebook:{"force_markdown":true} -->

```elixir
$ git checkout -b feature-branch
# Stage And Commit Changes
$ git checkout main
$ git merge feature-branch
```

<!-- livebook:{"break_markdown":true} -->

### Empurrando e puxando alterações

Podemos empurrar alterações de uma branch local para uma branch remota e puxar alterações de uma branch remota para uma branch local usando `git pull` e `git push`.

```
$ git pull
$ git push
```

A primeira vez que empurramos uma alteração, precisamos conectar a branch local e remota usando `--set-upstream`.

<!-- livebook:{"force_markdown":true} -->

```elixir
$ git push --set-upstream origin <branchname>
# Ou -u para abreviar.
$ git push -u origin <branchname>
```

<!-- livebook:{"break_markdown":true} -->

### Mesclando Alterações Remotas (Fazendo um Pull Request)

Para mesclar branches remotas, usamos [criar um pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request) no GitHub e aceitamos o pull request para mesclar uma branch remota com outra. Note que isso não atualiza as branches locais. Essas alterações precisam ser puxadas para a branch local correspondente.

```elixir
$ git checkout -b feature-branch
# Stage And Commit Changes
$ git push -u origin feature-branch
# Make Pull Request On GitHub
# Make Merge Pull Request Into Main On GitHub
$ git checkout main
$ git pull
```

Aqui está um diagrama do fluxo completo.

```mermaid
sequenceDiagram
participant LM as Main Local
participant LF as Feature Local
participant RF as Feature Remota
participant RM as Main Remota

Note right of LM: git checkout -b feature-branch
LM --> LF: checkout
Note left of LF: git add .
Note left of LF: git commit -m "message"
LF --> LF: commit changes
Note left of RF: git push -u origin feature-branch
LF ->> RF: push changes
Note right of RF: Make PR on GitHub
RF --> RF: create pull request
Note left of RM: Accept PR on GitHub
RF ->> RM: merge pull request
Note left of RM: git checkout main
Note left of RM: git pull
RM ->> LM: pull changes
```

<!-- livebook:{"break_markdown":true} -->

### Sua vez

Crie uma `feature-branch` no seu projeto `github_example`.

1. **local**: faça stage, commit e merge de algumas alterações locais para `main`.
2. **remoto**: faça stage, commit e push de algumas alterações para uma branch remota. Faça um pull request e merge para a branch `main` remota. Uma vez mesclada, puxe as alterações para a sua branch `main` local.

## Estratégias de Branching

### Desenvolvimento Baseado em Branch

<!-- livebook:{"break_markdown":true} -->

O controle de versão nos permite armazenar diferentes versões do projeto. Normalmente, existe uma branch principal para a versão mais recente do projeto.

A estratégia de controle de versão mais direta usa apenas uma branch principal. Os desenvolvedores podem fazer push e pull da branch principal para obter as últimas alterações.

```mermaid
sequenceDiagram
    actor D1 as Desenvolvedor 1
    participant R as Principal
    actor D2 as Desenvolvedor 2
    D1->> R: faz push das alterações
    R->> D2: puxa (pull) as alterações
    D2->> R: faz push das alterações
    R->> D1: puxa (pull) as alterações
```

É conveniente e rápido. No entanto, não possui um sistema de revisão para alterações de código. Portanto, é potencialmente excelente para pequenos projetos com membros da equipe altamente confiáveis, mas pode ser menos eficaz para grandes projetos que exigem revisão de código ou vários estágios de teste.

<!-- livebook:{"break_markdown":true} -->

### Pipelines Dev -> QA -> Staging -> Prod

Algumas empresas terão muitos estágios de revisão para as alterações.

Não existe uma estratégia universal. Cada projeto pode ter um pipeline diferente. No entanto, algumas etapas comuns incluem:

* **Branch de Feature**: Uma branch contendo uma alteração específica.
* **Desenvolvimento**: Branch de teste e integração do desenvolvedor.
* **Garantia de Qualidade (QA)**: Branch de teste de garantia de qualidade.
* **Staging**: Alterações aprovadas prontas para produção, mas ainda não implantadas.
* **Main**: A versão mais recente disponível do projeto.

```mermaid
---
title: Git Pipeline
---
gitGraph
  commit
  branch development
  commit
  branch feature-branch
  checkout feature-branch
  commit
  commit
  commit
  branch qa
  commit
  branch staging
  commit
  branch production
  commit
  checkout main
  merge production
```

## Conflitos de Merge

O controle de versão nos permite desenvolver nossa própria versão do projeto isolada para a nossa versão local. No entanto, se dois desenvolvedores editarem o mesmo arquivo, é possível ter conflitos.

Esses conflitos precisam ser resolvidos manualmente. Muitas vezes é mais fácil [resolver conflitos usando o GitHub Desktop](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github) ou com o Visual Studio Code.

<!-- livebook:{"break_markdown":true} -->

![](images/resolve_conflicts_vsc.png)

## Leitura Adicional

Considere o(s) seguinte(s) recurso(s) para aprofundar seu entendimento do tópico.

* [Documentação e Guias do Git](https://git-scm.com/)
* [Documentação e Guias do GitHub](https://docs.github.com/en)

## Commit do Seu Progresso

A DockYard Academy agora recomenda que você use a última [Release](https://github.com/DockYard-Academy/curriculum/releases) em vez de fazer fork ou clonar nosso repositório.

Execute `git status` para garantir que não haja alterações indesejáveis. Em seguida, execute o seguinte na linha de comando da pasta `curriculum` para fazer commit do seu progresso.

```
$ git add .
$ git commit -m "finish Git reading"
$ git push
```

Estamos orgulhosos de oferecer nosso currículo de código aberto gratuitamente para qualquer pessoa aprender no seu próprio ritmo.

Também oferecemos um curso pago onde você pode aprender com um instrutor ao lado de um grupo de seus pares. Aceitaremos inscrições para a turma de junho-agosto de 2023 em breve.

## Navegação

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Início</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Git">Reportar um Problema</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/command_line.livemd">Linha de Comando</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/livebook.livemd">Livebook</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
