# Command Line

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/computer_hardware.livemd">Computer Hardware</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/git.livemd">Git</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Perguntas de Revisão

Ao completar esta lição, um estudante deve ser capaz de responder às seguintes perguntas:

* Como você usa a linha de comando para navegar no sistema de arquivos?
* Como você usa a linha de comando para manipular (criar e remover) pastas e arquivos?

## Visão Geral

Usamos a linha de comando para interagir com nosso computador através de uma interface de texto, em vez de uma Interface Gráfica do Usuário (GUI).

Muitos programas só funcionam através da linha de comando. Geralmente, chamamos esses de **Aplicações de Linha de Comando**, **Aplicações CLI** (para Interface de Linha de Comando), ou apenas **CLIs**.

A linha de comando será diferente dependendo do seu sistema operacional (Windows, macOS, GNU/Linux). Assim, incluiremos os comandos instruções específicas para cada sistema operacional.

Cada sistema operacional usa um programa diferente para sua linha de comando. Siga as instruções para o seu sistema operacional para abrir a sua linha de comando.

* **Windows**: Abra o menu iniciar com a tecla <kbd>Win <i class="ri-windows-fill"></i></kbd>. Procure por Prompt de Comando. Certifique-se de executar no modo administrador para evitar problemas de permissão.
* **macOS ou GNU/Linux**: Abra o aplicativo Terminal <kbd>Ctrl+Alt+T</kbd>
* **macOS** Clique no ícone do Launchpad no Dock ou abra o Launchpad com <kbd>Command + Space</kbd>. Digite Terminal no campo de pesquisa, depois clique no programa Terminal.
  Para uma visão geral da Interface de Linha de Comando, recomendamos este excelente vídeo do Crash Course Computer Science.

<!-- livebook:{"attrs":"eyJzb3VyY2UiOiJZb3VUdWJlLm5ldyhcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9NFJQdEo5VXlIUzBcIikiLCJ0aXRsZSI6IkNvbW1hbmQgTGluZSBJbnRlcmZhY2VzIn0","chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=4RPtJ9UyHS0")
```

### Diretório de Trabalho Atual

Sua linha de comando deve exibir o diretório de trabalho atual. Você frequentemente verá `$`  representando o diretório de trabalho atual em tutoriais. Omita o `$` ao inserir texto na sua linha de comando.

Por exemplo, no Windows 11, o meu é:

```sh
C:\Users\brook>
```

### Sua Vez

Abra a linha de comando no seu computador e digite o comando `whoami` para ver o seu usuário atual.

Você deve ver uma saída semelhante.

```sh
$ whoami
seu_nome_de_usuário
```

## Executando arquivos Elixir

Com o [Elixir instalado](https://elixir-lang.org/install.html), podemos usar a linha de comando para executar um arquivo Elixir terminado em `.ex` ou `.exs`.

O Elixir trata ambas as extensões de arquivo de maneira semelhante. No entanto, geralmente usamos arquivos `.exs` para scripts.

Vamos criar um script Elixir. Primeiro, crie um arquivo `script.exs` com o seguinte conteúdo. Isso imprime uma mensagem `"Olá, mundo!"` no seu console.

<!-- livebook:{"force_markdown":true} -->

```elixir
IO.puts("Hello, World!")
```

Em seguida, execute o arquivo a partir da linha de comando. Qualquer código Elixir dentro do arquivo será executado.

```
$ elixir script.ex
Hello, World!
```

## Permissões (sudo)

Alguns comandos requerem permissões para executar. Você deve ver um erro na linha de comando
se o comando requer permissões.

No **Windows**, você geralmente precisa executar o Prompt de Comando ou Powershell no modo administrador.

Para **macOS & GNU/Linux**, você pode anteceder comandos com **sudo**. Você será solicitado a digitar a senha do seu computador. Você notará que `whoami` retorna um valor diferente (provavelmente `root`).

Root é a conta de superusuário no macOS e GNU/Linux.

```sh
$ sudo whoami
root
```

## Listar Arquivos & Pastas

Nosso computador armazena **arquivos** e **pastas**. Os termos **pasta** e **diretório** são intercambiáveis.

Usamos os seguintes comandos para listar arquivos e pastas.

* **Windows**: `dir`
* **macOS ou GNU/Linux**: `ls`

macOS e GNU/Linux escondem arquivos específicos. Por exemplo, arquivos
que começam com `.` são automaticamente ocultados.

Você pode ver arquivos ocultos com `ls -a`.

```sh
$ ls -a
```

No **Windows**, todos os arquivos e pastas devem ser exibidos por padrão.

```sh
C:\> dir
```

### Sua Vez

Use a linha de comando para listar os arquivos e pastas no diretório de trabalho atual. Se você estiver
no macOS ou GNU/Linux, use tanto `ls` quanto `ls -a` para ver a diferença.

## Criar Arquivos

Você pode criar um arquivo usando os seguintes comandos:

* **macOS & GNU/Linux**: `touch`
* **Windows**: `echo`

**macOS & GNU/Linux** permitem que você insira `touch` com o nome de um arquivo.

```sh
$ touch ./example_file.txt
```

**Windows** requer que você insira o conteúdo em (`>`) o arquivo.

```sh
C:\> echo exemplo de conteúdo > ./example_file.txt
```

No **Windows**, você pode usar `type nul` para criar um arquivo vazio.

```sh
C:\> echo type nul > ./example_file.txt
```

`./` representa o diretório de trabalho atual. Você geralmente pode omiti-lo.

Aqui estão os mesmos comandos sem o `./`.

```sh
$ touch example_file.txt
$ echo exemplo de conteúdo > example_file.txt
```

### Sua Vez

Usando a linha de comando, crie um arquivo chamado `test.txt`.

No **macOS & GNU/Linux** execute:

```sh
$ touch test.txt
```

No **Windows** execute:

```sh
C:\> type nul > text.txt
```

## Criar Pastas

Você pode criar uma pasta com `mkdir` em todos os sistemas operacionais. É uma abreviação para **make directory**.

### Sua Vez

Usando a linha de comando, crie uma pasta `example` usando `mkdir`.

```sh
$ mkdir example
```

Em seguida, use a linha de comando
para criar um arquivo chamado `in_example.txt` dentro da pasta `example`.

No **macOS ou GNU/Linux**, insira:

```sh
$ touch example/in_example.txt
```

No **Windows** insira:

```sh
C:\> echo type nul > example/in_example.txt
```

## Navegando no Sistema de Arquivos

Você pode navegar no sistema de arquivos com `cd` em todos os sistemas operacionais.

Você navega por arquivos e pastas da mesma maneira que clicaria no explorador de arquivos.

Insira `cd` com o caminho da pasta para navegar até ela. A pasta deve existir.

```sh
$ cd example_folder
$ cd first_folder/second_folder/third_folder
```

Você pode navegar para pastas superiores usando `../`. Você pode subir qualquer número de pastas repetindo `../`.

```sh
$ cd ../
$ cd ../../../
```

Vamos percorrer um exemplo com várias pastas aninhadas assim.

```sh
/top
  /folder_a
    /folder_b
      /folder_c
  /folder_1
    /folder_2
      /folder_3
```

<!-- livebook:{"break_markdown":true} -->

Usamos `cd` para navegar entre essas pastas e definir o diretório de trabalho atual.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
top --> folder_1 --> folder_2 --> folder_3
top --> folder_a --> folder_b --> folder_c
style top fill:lightgreen
```

Por exemplo, podemos `cd folder_1/folder_2/` para definir o diretório de trabalho atual como `folder_2`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
top_level_folder --> folder_1 --> folder_2 --> folder_3
top_level_folder --> folder_a --> folder_b --> folder_c
style folder_2 fill:lightgreen
```

<!-- livebook:{"break_markdown":true} -->

E use `cd ../../folder_a/folder_b/folder_c` para definir o diretório de trabalho atual como `folder_c`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
top_level_folder --> folder_1 --> folder_2 --> folder_3
top_level_folder --> folder_a --> folder_b --> folder_c
style folder_c fill:lightgreen
```

<!-- livebook:{"break_markdown":true} -->

### Sua Vez

Usando a linha de comando, entre na pasta `example` que você criou anteriormente. Liste todos os arquivos na pasta usando `ls` ou `dir`. Você deve
ver o arquivo `in_example.txt` do exercício anterior.

```sh
$ cd example
```

## Remover Arquivos

Você pode remover arquivos usando os seguintes comandos.

* **macOS & GNU/Linux**: `rm`
* **Windows**: `del`

<!-- livebook:{"break_markdown":true} -->

### Sua Vez

Usando a linha de comando, delete o arquivo `in_example.txt` do exercício anterior.

No **macOS & GNU/Linux** execute:

```sh
$ rm example/in_example.txt
```

No **Windows** execute:

```sh
C:\> del example/in_example.txt
```

## Remover Pastas

Você pode remover pastas usando os seguintes comandos.

* **macOS & GNU/Linux**: `rm -rf`
* **Windows**: `rmdir`

### Sua Vez

Remova a pasta `example` do exercício anterior.

No **macOS & GNU/Linux** execute:

```sh
$ rm -rf example
```

No **Windows** execute:

```sh
C:\> rmdir example
```

## Lendo Arquivos

Você pode ler o conteúdo dos arquivos com os seguintes comandos.

* **macOS & GNU/Linux**: `cat`
* **Windows**: `type`.

### Sua Vez

Crie um novo arquivo `read_example.txt` com algum conteúdo de texto.
Você pode usar `echo` em todos os sistemas operacionais para criar um arquivo com algum conteúdo. No entanto,
`type nul` só funciona no **Windows**.

execute:

```sh
$ echo conteúdo > read_example.txt
```

Em seguida, leia o conteúdo.

No **macOS & GNU/Linux** execute:

```sh
$ cat read_example.txt
```

No **Windows** execute:

```sh
C:\> type read_example.txt
```

## Autocompletar com Tab

Para economizar tempo, você geralmente pode usar o botão <kbd>Tab</kbd> para autocompletar um comando ou nome de arquivo.

### Sua Vez

Usando a linha de comando, crie uma nova pasta chamada `tab_to_folder`.

```sh
$ mkdir tab_to_folder
```

Navegue até a pasta usando a autocompleção. Comece digitando `tab` e então use a tecla <kbd>Tab</kbd> para autocompletar o nome da pasta.

```sh
$ cd tab_to_folder
```

## Com Grande Poder

A linha de comando é poderosa. Portanto, a linha de comando é
também perigosa. Por exemplo, um simples comando pode deletar todos os arquivos do seu computador.

Abra o dropdown abaixo para ver o comando. Você nunca deve executá-lo.

<details style="background-color: lightcoral; color: white; padding: 1rem;">
<summary>PERIGO NÃO EXECUTE</summary>
rm -rf *
</details>

Então, tenha cuidado ao executar comandos na sua linha de comando.

## Resumo

Esta lição é uma breve introdução à linha de comando. Aqui está um rápido resumo dos principais pontos.

<!-- livebook:{"break_markdown":true} -->

**macOS & GNU/Linux**

* listar arquivos e pastas: `ls` e `ls -a`.
* criar arquivos: `touch`.
* criar pastas: `mkdir`.
* navegar: `cd`.
* remover arquivos: `rm`.
* remover pastas: `rm -rf`.
* ler conteúdo de arquivos: `cat`.

**Windows**

* listar arquivos e pastas: `dir`.
* criar arquivos: `echo`.
* criar pastas: `mkdir`.
* navegar: `cd`.
* remover arquivos: `del`.
* remover pastas: `rmdir`.
* ler conteúdo de arquivos: `type`.

Agora você pode lidar com tarefas diárias da linha de comando! Espere aprender mais sobre a linha de comando à medida que você encontra mais desafios de programação.

## Registre Seu Progresso

A DockYard Academy agora recomenda que você use a última [Versão](https://github.com/DockYard-Academy/curriculum/releases) em vez de fazer fork ou clonar nosso repositório.

Execute `git status` para garantir que não haja alterações indesejáveis.
Em seguida, execute o seguinte na sua linha de comando a partir da pasta `curriculum` para registrar seu progresso.

```
$ git add .
$ git commit -m "finish Command Line reading"
$ git push
```

Temos orgulho de oferecer nosso currículo de código aberto gratuitamente para qualquer pessoa aprender no seu próprio ritmo.

Também oferecemos um curso pago onde você pode aprender com um instrutor ao lado de um grupo de seus colegas.
Aceitaremos inscrições para a turma de junho a agosto de 2023 em breve.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Command Line">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/computer_hardware.livemd">Computer Hardware</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/git.livemd">Git</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
